import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:provider/provider.dart';
import 'package:gobeap/services/auth_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:io';

class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  File? _profileImage;
  final ImagePicker _picker = ImagePicker();

  // Controllers for form fields
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();

  Future<void> _pickImage() async {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.camera_alt),
                title: const Text('Camera'),
                onTap: () async {
                  Navigator.pop(context);
                  final XFile? image = await _picker.pickImage(
                    source: ImageSource.camera,
                    imageQuality: 80,
                  );
                  if (image != null) {
                    setState(() {
                      _profileImage = File(image.path);
                    });
                  }
                },
              ),
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: const Text('Gallery'),
                onTap: () async {
                  Navigator.pop(context);
                  final XFile? image = await _picker.pickImage(
                    source: ImageSource.gallery,
                    imageQuality: 80,
                  );
                  if (image != null) {
                    setState(() {
                      _profileImage = File(image.path);
                    });
                  }
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _showSettingsMenu() {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (BuildContext context) {
        return Container(
          padding: const EdgeInsets.symmetric(vertical: 16),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                width: 40,
                height: 5,
                margin: const EdgeInsets.only(bottom: 16),
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(2.5),
                ),
              ),
              const Text(
                'Pengaturan',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              ListTile(
                leading: const Icon(
                  Icons.info_outline,
                  color: Color(0xFF135E71),
                ),
                title: const Text('Tentang Aplikasi'),
                onTap: () {
                  Navigator.pop(context);
                  _showAboutAppDialog();
                },
              ),              ListTile(
                leading: const Icon(Icons.volume_up, color: Color(0xFF135E71)),
                title: const Text('Pengaturan Suara Alarm'),
                onTap: () {
                  Navigator.pop(context);
                  if (Provider.of<AuthService>(context, listen: false).isAuthenticated) {
                    _showAlarmSoundSettings();
                  } else {
                    // Show login required dialog
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text('Fitur Premium'),
                        content: Text('Anda perlu login untuk mengakses pengaturan suara alarm kustom.'),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: Text('Nanti'),
                          ),
                          ElevatedButton(
                            onPressed: () {
                              Navigator.pop(context);
                              Navigator.pushNamed(context, '/login');
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Color(0xFF135E71),
                            ),
                            child: Text('Login Sekarang'),
                          ),
                        ],
                      ),
                    );
                  }
                },
              ),
              const Divider(),              ListTile(
                leading: const Icon(Icons.dark_mode, color: Color(0xFF135E71)),
                title: const Text('Mode Gelap'),
                trailing: Switch(
                  value: false, // replace with actual theme state
                  onChanged: (value) {
                    // Toggle theme logic
                  },
                  activeColor: const Color(0xFF135E71),
                ),
              ),
              const Divider(),
              Consumer<AuthService>(
                builder: (context, authService, child) {
                  final isLoggedIn = authService.isAuthenticated;
                  return ListTile(
                    leading: Icon(
                      isLoggedIn ? Icons.logout : Icons.login,
                      color: isLoggedIn ? Colors.red : const Color(0xFF135E71),
                    ),
                    title: Text(isLoggedIn ? 'Keluar' : 'Masuk'),
                    onTap: () async {
                      Navigator.pop(context);
                      if (isLoggedIn) {
                        // Confirm logout
                        final shouldLogout = await _showLogoutConfirmationDialog();
                        if (shouldLogout) {
                          await authService.signOut();
                          Navigator.pushReplacementNamed(context, '/login');
                        }
                      } else {
                        Navigator.pushNamed(context, '/login');
                      }
                    },
                  );
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _showAboutAppDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          backgroundColor: Colors.white.withOpacity(
            1,
          ), // Latar belakang sedikit transparan
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          // Dialog lebih lebar dengan insets horizontal lebih kecil
          insetPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 24),
          child: Container(
            width:
                MediaQuery.of(context).size.width * 0.9, // 90% dari lebar layar
            constraints: BoxConstraints(maxWidth: 500), // Maksimum lebar
            padding: EdgeInsets.all(24),
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Judul dialog
                  Text(
                    'Tentang GeoBeep',
                    style: TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF135E71),
                    ),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 20),

                  // Logo aplikasi
                  Container(
                    padding: EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black12,
                          blurRadius: 10,
                          spreadRadius: 2,
                        ),
                      ],
                    ),
                    child: Image.asset(
                      'assets/logo.png',
                      height: 100,
                      width: 100,
                      errorBuilder: (context, error, stackTrace) {
                        return Icon(
                          Icons.train,
                          size: 100,
                          color: Color(0xFF135E71),
                        );
                      },
                    ),
                  ),

                  SizedBox(height: 24),

                  // Versi aplikasi
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: Color(0xFF135E71).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      'GeoBeep v1.0.0',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                        color: Color(0xFF135E71),
                      ),
                    ),
                  ),

                  SizedBox(height: 24),

                  // Deskripsi aplikasi
                  Text(
                    'GeoBeep adalah aplikasi yang membantu pengguna KRL Jabodetabek untuk mendapatkan notifikasi saat mendekati stasiun tujuan.',
                    style: TextStyle(fontSize: 16, height: 1.4),
                    textAlign: TextAlign.center,
                  ),

                  Divider(height: 40, thickness: 1),

                  // Fitur utama
                  Container(
                    width: double.infinity,
                    alignment: Alignment.centerLeft,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Fitur Utama:',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                            color: Color(0xFF135E71),
                          ),
                        ),
                        SizedBox(height: 8),
                        _buildFeatureItem(
                          'Alarm berbasis lokasi untuk stasiun KRL',
                        ),
                        _buildFeatureItem(
                          'Favorit stasiun yang sering dikunjungi',
                        ),
                        _buildFeatureItem(
                          'Informasi jarak ke stasiun terdekat',
                        ),
                        _buildFeatureItem('Pencarian dan filter stasiun'),
                        _buildFeatureItem('Pengaturan suara alarm kustom'),
                      ],
                    ),
                  ),

                  SizedBox(height: 24),

                  // Pengembang
                  Container(
                    width: double.infinity,
                    alignment: Alignment.centerLeft,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Dikembangkan oleh:',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                            color: Color(0xFF135E71),
                          ),
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Tim PBL Mobile Computing',
                          style: TextStyle(fontSize: 16),
                        ),
                      ],
                    ),
                  ),

                  SizedBox(height: 20),

                  // Copyright
                  Text(
                    '© 2023 GeoBeep. All rights reserved.',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),

                  SizedBox(height: 20),

                  // Tombol tutup
                  ElevatedButton(
                    onPressed: () => Navigator.pop(context),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Color(0xFF135E71),
                      foregroundColor: Colors.white,
                      minimumSize: Size(double.infinity, 48),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      'Tutup',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  // Helper method untuk membuat item fitur dengan bullet
  Widget _buildFeatureItem(String text) {
    return Padding(
      padding: EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            margin: EdgeInsets.only(top: 6, right: 8),
            width: 8,
            height: 8,
            decoration: BoxDecoration(
              color: Color(0xFF135E71),
              shape: BoxShape.circle,
            ),
          ),
          Expanded(child: Text(text, style: TextStyle(fontSize: 15))),
        ],
      ),
    );
  }

  void _showAlarmSoundSettings() {
    final List<Map<String, dynamic>> alarmSounds = [
      {'name': 'Alarm Default', 'isSelected': true},
      {'name': 'Alarm Kereta', 'isSelected': false},
      {'name': 'Beep Stasiun', 'isSelected': false},
      {'name': 'Pemberitahuan Stasiun', 'isSelected': false},
      {
        'name': 'Custom Alarm',
        'isSelected': false,
        'isCustom': true,
        'path': '',
      },
    ];

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Dialog(
              backgroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              insetPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 24),
              child: Container(
                width: MediaQuery.of(context).size.width * 0.9,
                constraints: BoxConstraints(maxWidth: 500),
                padding: EdgeInsets.all(24),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Pengaturan Suara Alarm',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF135E71),
                      ),
                    ),
                    SizedBox(height: 16),

                    Text(
                      'Pilih suara alarm yang akan digunakan:',
                      style: TextStyle(fontSize: 15),
                    ),
                    SizedBox(height: 12),

                    // List of alarm sounds
                    Container(
                      decoration: BoxDecoration(
                        color: Colors.grey[100],
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: ListView.builder(
                        shrinkWrap: true,
                        itemCount: alarmSounds.length,
                        itemBuilder: (context, index) {
                          final isCustom =
                              alarmSounds[index]['isCustom'] == true;
                          final isSelected = alarmSounds[index]['isSelected'];

                          return Column(
                            children: [
                              ListTile(
                                title: Text(
                                  alarmSounds[index]['name'],
                                  style: TextStyle(
                                    fontWeight:
                                        isSelected
                                            ? FontWeight.bold
                                            : FontWeight.normal,
                                  ),
                                ),
                                leading: Radio<int>(
                                  value: index,
                                  groupValue: alarmSounds.indexWhere(
                                    (sound) => sound['isSelected'],
                                  ),
                                  onChanged: (value) {
                                    setState(() {
                                      for (
                                        var i = 0;
                                        i < alarmSounds.length;
                                        i++
                                      ) {
                                        alarmSounds[i]['isSelected'] =
                                            i == value;
                                      }

                                      // If custom is selected but no file yet, open file picker
                                      if (isCustom &&
                                          alarmSounds[index]['path'] == '') {
                                        _pickCustomAlarmSound(
                                          setState,
                                          alarmSounds,
                                          index,
                                        );
                                      }
                                    });
                                  },
                                  activeColor: Color(0xFF135E71),
                                ),
                                trailing: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    // Play button
                                    IconButton(
                                      icon: Icon(
                                        Icons.play_circle,
                                        color: Color(0xFF135E71),
                                      ),
                                      onPressed: () {
                                        // Logic to play sound
                                        if (isCustom &&
                                            alarmSounds[index]['path'] == '') {
                                          ScaffoldMessenger.of(
                                            context,
                                          ).showSnackBar(
                                            SnackBar(
                                              content: Text(
                                                'Silakan pilih file audio terlebih dahulu',
                                              ),
                                              duration: Duration(seconds: 2),
                                            ),
                                          );
                                        } else {
                                          ScaffoldMessenger.of(
                                            context,
                                          ).showSnackBar(
                                            SnackBar(
                                              content: Text(
                                                'Memutar ${alarmSounds[index]['name']}',
                                              ),
                                              duration: Duration(seconds: 1),
                                            ),
                                          );
                                        }
                                      },
                                    ),

                                    // File picker button for custom alarm
                                    if (isCustom)
                                      IconButton(
                                        icon: Icon(
                                          Icons.upload_file,
                                          color: Color(0xFF135E71),
                                        ),
                                        onPressed: () {
                                          _pickCustomAlarmSound(
                                            setState,
                                            alarmSounds,
                                            index,
                                          );
                                        },
                                      ),
                                  ],
                                ),
                              ),

                              // Show selected file path for custom alarm
                              if (isCustom && alarmSounds[index]['path'] != '')
                                Padding(
                                  padding: EdgeInsets.only(
                                    left: 72,
                                    right: 16,
                                    bottom: 8,
                                  ),
                                  child: Row(
                                    children: [
                                      Expanded(
                                        child: Text(
                                          'File: ${_getFileName(alarmSounds[index]['path'])}',
                                          style: TextStyle(
                                            fontSize: 12,
                                            color: Colors.grey[700],
                                            fontStyle: FontStyle.italic,
                                          ),
                                          maxLines: 1,
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ),
                                      if (alarmSounds[index]['path'] != '')
                                        InkWell(
                                          child: Icon(
                                            Icons.close,
                                            size: 16,
                                            color: Colors.red,
                                          ),
                                          onTap: () {
                                            setState(() {
                                              alarmSounds[index]['path'] = '';
                                            });
                                          },
                                        ),
                                    ],
                                  ),
                                ),

                              if (index < alarmSounds.length - 1)
                                Divider(height: 1),
                            ],
                          );
                        },
                      ),
                    ),

                    SizedBox(height: 24),

                    // Volume control
                    Text(
                      'Volume Alarm:',
                      style: TextStyle(
                        fontSize: 15,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    SizedBox(height: 8),
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 8,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.grey[100],
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Row(
                        children: [
                          Icon(
                            Icons.volume_down,
                            size: 22,
                            color: Color(0xFF135E71),
                          ),
                          Expanded(
                            child: Slider(
                              value: 0.7, // replace with actual volume value
                              onChanged: (value) {
                                // Update volume value
                              },
                              activeColor: Color(0xFF135E71),
                            ),
                          ),
                          Icon(
                            Icons.volume_up,
                            size: 22,
                            color: Color(0xFF135E71),
                          ),
                        ],
                      ),
                    ),

                    SizedBox(height: 24),

                    // Test alarm section
                    Container(
                      width: double.infinity,
                      padding: EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Color(0xFF135E71).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: Color(0xFF135E71).withOpacity(0.3),
                        ),
                      ),
                      child: Column(
                        children: [
                          Text(
                            'Uji Suara Alarm',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 15,
                              color: Color(0xFF135E71),
                            ),
                          ),
                          SizedBox(height: 8),
                          Text(
                            'Tekan tombol di bawah untuk mendengar bagaimana alarm akan berbunyi ketika diaktifkan',
                            style: TextStyle(fontSize: 13),
                            textAlign: TextAlign.center,
                          ),
                          SizedBox(height: 12),
                          ElevatedButton.icon(
                            icon: Icon(Icons.notifications_active),
                            label: Text('Tes Alarm'),
                            onPressed: () {
                              // Test current selected alarm
                              final selectedIndex = alarmSounds.indexWhere(
                                (sound) => sound['isSelected'],
                              );

                              if (selectedIndex >= 0) {
                                final alarmName =
                                    alarmSounds[selectedIndex]['name'];

                                // If custom but no file selected
                                if (alarmSounds[selectedIndex]['isCustom'] ==
                                        true &&
                                    alarmSounds[selectedIndex]['path'] == '') {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    SnackBar(
                                      content: Text(
                                        'Silakan pilih file audio terlebih dahulu',
                                      ),
                                      duration: Duration(seconds: 2),
                                    ),
                                  );
                                } else {
                                  // Play the test alarm
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    SnackBar(
                                      content: Text(
                                        'Memutar alarm: $alarmName',
                                      ),
                                      duration: Duration(seconds: 2),
                                    ),
                                  );
                                }
                              }
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Color(0xFF135E71),
                              foregroundColor: Colors.white,
                              padding: EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 12,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),

                    SizedBox(height: 24),

                    // Buttons
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          child: Text(
                            'Batal',
                            style: TextStyle(color: Color(0xFF135E71)),
                          ),
                        ),
                        SizedBox(width: 16),
                        ElevatedButton(
                          onPressed: () {
                            // Save alarm sound settings
                            final selectedIndex = alarmSounds.indexWhere(
                              (sound) => sound['isSelected'],
                            );

                            // Check if custom sound is selected but no file
                            if (selectedIndex >= 0 &&
                                alarmSounds[selectedIndex]['isCustom'] ==
                                    true &&
                                alarmSounds[selectedIndex]['path'] == '') {
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text(
                                    'Silakan pilih file audio untuk Custom Alarm',
                                  ),
                                  duration: Duration(seconds: 2),
                                ),
                              );
                              return;
                            }

                            Navigator.pop(context);
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text(
                                  'Pengaturan suara alarm berhasil disimpan!',
                                ),
                                duration: Duration(seconds: 2),
                              ),
                            );
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Color(0xFF135E71),
                            foregroundColor: Colors.white,
                            padding: EdgeInsets.symmetric(
                              horizontal: 16,
                              vertical: 12,
                            ),
                          ),
                          child: Text('Simpan'),
                        ),
                      ],
                    ),
                  ],
                ),
              );
            });
      },
    );
  }

  // Helper method to pick custom alarm sound file
  Future<void> _pickCustomAlarmSound(
    StateSetter setState,
    List<Map<String, dynamic>> alarmSounds,
    int index,
  ) async {
    // Dalam kondisi nyata, gunakan package file_picker:
    // final result = await FilePicker.platform.pickFiles(
    //   type: FileType.audio,
    //   allowMultiple: false,
    // );

    // Simulasi pemilihan file
    await Future.delayed(Duration(milliseconds: 500));
    final String mockFilePath =
        '/storage/emulated/0/Download/my_custom_alarm.mp3';

    setState(() {
      alarmSounds[index]['path'] = mockFilePath;

      // Auto-select this option
      for (var i = 0; i < alarmSounds.length; i++) {
        alarmSounds[i]['isSelected'] = i == index;
      }
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          'File alarm kustom dipilih: ${_getFileName(mockFilePath)}',
        ),
        duration: Duration(seconds: 2),
      ),
    );
  }

  // Helper method to extract filename from path
  String _getFileName(String path) {
    return path.split('/').last;
  }

  Future<bool> _showLogoutConfirmationDialog() async {
    return await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Konfirmasi'),
          content: const Text('Apakah Anda yakin ingin keluar?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(false);
              },
              child: const Text('Batal'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(true);
              },
              child: const Text(
                'Keluar',
                style: TextStyle(color: Colors.red),
              ),
            ),
          ],
        );
      },
    ) ?? false;
  }

  @override
  void dispose() {
    _nameController.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.primary,
        title: Text(
          "Profile",
          style: TextStyle(color: Theme.of(context).colorScheme.secondary),
        ),
        automaticallyImplyLeading: false,
        actions: [
          // Settings button
          IconButton(
            icon: Icon(
              Icons.settings,
              color: Theme.of(context).colorScheme.secondary,
            ),
            onPressed: _showSettingsMenu,
          ),
        ],
      ),
      body: Consumer<AuthService>(
        builder: (context, authService, child) {
          final user = authService.currentUser;
          final isLoggedIn = user != null;
          
          // Set email from Firebase user if logged in
          if (isLoggedIn && _emailController.text.isEmpty) {
            _emailController.text = user.email ?? '';
            if (user.displayName != null) {
              _nameController.text = user.displayName!;
            }
          }
          
          return SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 50.0, vertical: 20.0),
        child: Column(
          children: [
            const SizedBox(height: 20),

            // Profile Image Section
            Center(
              child: Stack(
                children: [
                  CircleAvatar(
                    radius: 60,
                    backgroundColor: Colors.grey[300],
                    backgroundImage:
                        _profileImage != null
                            ? FileImage(_profileImage!)
                            : null,
                    child:
                        _profileImage == null
                            ? Icon(
                              Icons.person,
                              size: 60,
                              color: Colors.grey[600],
                            )
                            : null,
                  ),
                  Positioned(
                    bottom: 0,
                    right: 0,
                    child: GestureDetector(
                      onTap: _pickImage,
                      child: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: const BoxDecoration(
                          color: Colors.black,
                          shape: BoxShape.circle,
                        ),
                        child: const Icon(
                          Icons.edit,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 40),

            // Name Field
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Nama',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                ),
                const SizedBox(height: 8),
                Container(
                  decoration: BoxDecoration(
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.3),
                        spreadRadius: 1,
                        blurRadius: 4,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: TextFormField(
                    controller: _nameController,
                    style: const TextStyle(fontWeight: FontWeight.w600),
                    decoration: InputDecoration(
                      filled: true,
                      fillColor: Colors.grey[200],
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide.none,
                      ),
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 20),

            // Phone Field
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'No. Telp',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                ),
                const SizedBox(height: 8),
                Container(
                  decoration: BoxDecoration(
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.3),
                        spreadRadius: 1,
                        blurRadius: 4,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: TextFormField(
                    controller: _phoneController,
                    keyboardType: TextInputType.phone,
                    style: const TextStyle(fontWeight: FontWeight.w600),
                    decoration: InputDecoration(
                      filled: true,
                      fillColor: Colors.grey[200],
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide.none,
                      ),
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 20),

            // Email Field
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Email',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                ),
                const SizedBox(height: 8),
                Container(
                  decoration: BoxDecoration(
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.3),
                        spreadRadius: 1,
                        blurRadius: 4,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: TextFormField(
                    controller: _emailController,
                    keyboardType: TextInputType.emailAddress,
                    style: const TextStyle(fontWeight: FontWeight.w600),
                    decoration: InputDecoration(
                      filled: true,
                      fillColor: Colors.grey[200],
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide.none,
                      ),
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 40),

            // Edit Profile Button
            Container(
              width: double.infinity,
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.4),
                    spreadRadius: 1,
                    blurRadius: 6,
                    offset: const Offset(0, 3),
                  ),
                ],
              ),
              child: ElevatedButton(
                onPressed: () {
                  // Handle edit profile action
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Profile updated successfully!'),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF135E71),
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 24),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  elevation: 0,
                ),
                child: const Text(
                  'EDIT PROFILE',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                ),
              ),
            ),

            const SizedBox(height: 16),            // Logout Button
            Consumer<AuthService>(
              builder: (context, authService, child) {
                final isLoggedIn = authService.isAuthenticated;
                
                return isLoggedIn
                    ? Container(
                        width: double.infinity,
                        decoration: BoxDecoration(
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.4),
                              spreadRadius: 1,
                              blurRadius: 6,
                              offset: const Offset(0, 3),
                            ),
                          ],
                        ),
                        child: ElevatedButton(
                          onPressed: () async {
                            // Handle logout action
                            final shouldLogout = await _showLogoutConfirmationDialog();
                            if (shouldLogout) {
                              await authService.signOut();
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text('Logged out successfully!'),
                                ),
                              );
                              Navigator.pushReplacementNamed(context, '/login');
                            }
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF508AA7),
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 24),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                            elevation: 0,
                          ),
                          child: const Text(
                            'LOGOUT',
                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                          ),
                        ),
                      )
                    : Container(
                        width: double.infinity,
                        decoration: BoxDecoration(
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.4),
                              spreadRadius: 1,
                              blurRadius: 6,
                              offset: const Offset(0, 3),
                            ),
                          ],
                        ),
                        child: ElevatedButton(
                          onPressed: () {
                            Navigator.pushNamed(context, '/login');
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF135E71),
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 24),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                            elevation: 0,
                          ),
                          child: const Text(
                            'LOGIN',
                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                          ),
                        ),
                      );
              },
            ),            const SizedBox(height: 20),
          ],
        ),
          );
        },
      ),
    );
  }
}
